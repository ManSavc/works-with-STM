/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>//needs for memset
#include <stdio.h> // needs for snprintf
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
uint16_t DeviceAdrr = 0xBE; //reading address "hts221" SLAVE ADDRES 5F, to read, shift '1' to left will be  BE
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t buffer[40];

//uint8_t AV_CONF[1];	//AV_CONF (10h) //Humidity and temperature resolution mode, may left default values
uint8_t CTRL_REG1[1]; //CTRL_REG1 (20h) PD: power-down control (0: power-down mode; 1: active mode)

uint8_t CTRL_REG2[1];  //CTRL_REG2 (21h)

uint8_t CTRL_REG3[1];  //CTRL_REG3 (22h)
uint8_t STATUS_REG[1];  //STATUS_REG (27h)

uint16_t TEMP_OUT_L[1];  	//TEMP_OUT_L (2Ah)
uint16_t TEMP_OUT_H[1];	//TEMP_OUT_H (2Bh)
int16_t TEMP_OUT_H_L[1];

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */
	uint8_t who_am_i[1];

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USART2_UART_Init();
	MX_I2C1_Init();
	/* USER CODE BEGIN 2 */
	//read the 'who am i'
	HAL_I2C_Mem_Read(&hi2c1, DeviceAdrr, 0x0F, 1, who_am_i, 1, HAL_MAX_DELAY);

	sprintf(buffer, "\n\t who_am_i[0] 0x %X -  %d", who_am_i[0], who_am_i[0]);

	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	memset(buffer, ' ', 40);	//to clear buffer

	if (who_am_i[0] == 188) {
		sprintf(buffer, "\n \n \t\t--   HTS221    --\n\r");
		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	} else {
		sprintf(buffer, "\t\t -- unknown device -- \t\t");
		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
	}

	memset(buffer, ' ', 40); //to clear buffer

	//let begin hts221

	//+++++++read the CTRL_REG1 (20h)
	//The PD bit is used to turn on the device. The device is in power-down mode when PD = ‘0’
	// (default value after boot). The device is active when PD is set to ‘1’.
	HAL_I2C_Mem_Read(&hi2c1, DeviceAdrr, 0x20, 1, CTRL_REG1, 1, HAL_MAX_DELAY);
	uint8_t reset[1];
	reset[0] = (CTRL_REG1[0] |= (1 << 7) | ( 1 << 1) | (1 << 3) );
	HAL_I2C_Mem_Write(&hi2c1, DeviceAdrr, 0x20, 1, reset, 1, HAL_MAX_DELAY);
	HAL_Delay(100);

	//------CTRL_REG2 (21h) The ONE_SHOT bit is used to start a new conversion. In this situation a single acquisition of
	/*	temperature and humidity is started when the ONE_SHOT bit is set to ‘1’. At the end of
	 conversion the new data are available in the output registers, the STATUS_REG[0] and
	 STATUS_REG[1] bits are set to ‘1’ and the ONE_SHOT bit comes back to ‘0’ by hardware
	 */
	HAL_I2C_Mem_Read(&hi2c1, DeviceAdrr, 0x21, 1, CTRL_REG2, 1, HAL_MAX_DELAY);
	reset[0] = 0;
	reset[0] = (CTRL_REG2[0] |= (1 << 0) | (1 << 7));
	HAL_I2C_Mem_Write(&hi2c1, DeviceAdrr, 0x21, 1, reset, 1, HAL_MAX_DELAY);
	HAL_Delay(100);

	//--------CTRL_REG3 (22h) DRDY_EN: Data Ready enable
//	(0: Data Ready disabled - default;1: Data Ready signal available on pin 3)
	HAL_I2C_Mem_Read(&hi2c1, DeviceAdrr, 0x22, 1, CTRL_REG3, 1, HAL_MAX_DELAY);
	reset[0] = 0;
	reset[0] = (CTRL_REG3[0] |= 1 << 2);
	HAL_I2C_Mem_Write(&hi2c1, DeviceAdrr, 0x22, 1, reset, 1, HAL_MAX_DELAY);
	HAL_Delay(100);

	//-----STATUS_REG (27h) tatus register; the content of this register is updated every one-shot reading, and after
//		completion of every ODR cycle, regardless of the BDU value in CTRL_REG1.
	HAL_I2C_Mem_Read(&hi2c1, DeviceAdrr, 0x27, 1, STATUS_REG, 1, HAL_MAX_DELAY);
	reset[0] = 0;
	reset[0] = (STATUS_REG[0] |= (1 << 0) | (1 << 1));
	HAL_I2C_Mem_Write(&hi2c1, DeviceAdrr, 0x27, 1, reset, 1, HAL_MAX_DELAY);
	HAL_Delay(100);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		//TEMP_OUT_L (2Ah)
		HAL_I2C_Mem_Read(&hi2c1, DeviceAdrr, 0x2A, 1, TEMP_OUT_L, 1, 100);
		//TEMP_OUT_H (2Bh)
		HAL_I2C_Mem_Read(&hi2c1, DeviceAdrr, 0x2B, 1, TEMP_OUT_H, 1, 100);
		//TEMP_OUT_H_L
		TEMP_OUT_H_L[0] = (int16_t)( ((uint8_t) TEMP_OUT_H[0] << 8) | ((uint8_t) TEMP_OUT_L[0]));

					 int res = (TEMP_OUT_H_L[0]);

					 float tempf =((float)res / 20);
	sprintf(buffer, "TEMP CELCIUS %.1f%cC opa	\n\n\r\n ",tempf  );
										HAL_UART_Transmit(&huart2, buffer, 30, 10);
										HAL_Delay(400);

				/* USER CODE BEGIN 3 */
			}
			/* USER CODE END 3 */
		}

		/**
		 * @brief System Clock Configuration
		 * @retval None
		 */
		void SystemClock_Config(void) {
			RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
			RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

			/** Configure the main internal regulator output voltage
			 */
			__HAL_RCC_PWR_CLK_ENABLE();
			__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

			/** Initializes the RCC Oscillators according to the specified parameters
			 * in the RCC_OscInitTypeDef structure.
			 */
			RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
			RCC_OscInitStruct.HSIState = RCC_HSI_ON;
			RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
			RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
			RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
			RCC_OscInitStruct.PLL.PLLM = 16;
			RCC_OscInitStruct.PLL.PLLN = 336;
			RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
			RCC_OscInitStruct.PLL.PLLQ = 4;
			if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
				Error_Handler();
			}

			/** Initializes the CPU, AHB and APB buses clocks
			 */
			RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK
					| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
					| RCC_CLOCKTYPE_PCLK2;
			RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
			RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
			RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

			if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)
					!= HAL_OK) {
				Error_Handler();
			}
		}

		/**
		 * @brief I2C1 Initialization Function
		 * @param None
		 * @retval None
		 */
		static void MX_I2C1_Init(void) {

			/* USER CODE BEGIN I2C1_Init 0 */

			/* USER CODE END I2C1_Init 0 */

			/* USER CODE BEGIN I2C1_Init 1 */

			/* USER CODE END I2C1_Init 1 */
			hi2c1.Instance = I2C1;
			hi2c1.Init.ClockSpeed = 100000;
			hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
			hi2c1.Init.OwnAddress1 = 0;
			hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
			hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
			hi2c1.Init.OwnAddress2 = 0;
			hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
			hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
			if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
				Error_Handler();
			}
			/* USER CODE BEGIN I2C1_Init 2 */

			/* USER CODE END I2C1_Init 2 */

		}

		/**
		 * @brief USART2 Initialization Function
		 * @param None
		 * @retval None
		 */
		static void MX_USART2_UART_Init(void) {

			/* USER CODE BEGIN USART2_Init 0 */

			/* USER CODE END USART2_Init 0 */

			/* USER CODE BEGIN USART2_Init 1 */

			/* USER CODE END USART2_Init 1 */
			huart2.Instance = USART2;
			huart2.Init.BaudRate = 115200;
			huart2.Init.WordLength = UART_WORDLENGTH_8B;
			huart2.Init.StopBits = UART_STOPBITS_1;
			huart2.Init.Parity = UART_PARITY_NONE;
			huart2.Init.Mode = UART_MODE_TX_RX;
			huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
			huart2.Init.OverSampling = UART_OVERSAMPLING_16;
			if (HAL_UART_Init(&huart2) != HAL_OK) {
				Error_Handler();
			}
			/* USER CODE BEGIN USART2_Init 2 */

			/* USER CODE END USART2_Init 2 */

		}

		/**
		 * @brief GPIO Initialization Function
		 * @param None
		 * @retval None
		 */
		static void MX_GPIO_Init(void) {
			GPIO_InitTypeDef GPIO_InitStruct = { 0 };
			/* USER CODE BEGIN MX_GPIO_Init_1 */
			/* USER CODE END MX_GPIO_Init_1 */

			/* GPIO Ports Clock Enable */
			__HAL_RCC_GPIOC_CLK_ENABLE();
			__HAL_RCC_GPIOH_CLK_ENABLE();
			__HAL_RCC_GPIOA_CLK_ENABLE();
			__HAL_RCC_GPIOB_CLK_ENABLE();

			/*Configure GPIO pin Output Level */
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

			/*Configure GPIO pin : B1_Pin */
			GPIO_InitStruct.Pin = B1_Pin;
			GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
			GPIO_InitStruct.Pull = GPIO_NOPULL;
			HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

			/*Configure GPIO pin : LD2_Pin */
			GPIO_InitStruct.Pin = LD2_Pin;
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
			GPIO_InitStruct.Pull = GPIO_NOPULL;
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
			HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

			/* USER CODE BEGIN MX_GPIO_Init_2 */
			/* USER CODE END MX_GPIO_Init_2 */
		}

		/* USER CODE BEGIN 4 */

		/* USER CODE END 4 */

		/**
		 * @brief  This function is executed in case of error occurrence.
		 * @retval None
		 */
		void Error_Handler(void) {
			/* USER CODE BEGIN Error_Handler_Debug */
			/* User can add his own implementation to report the HAL error return state */
			__disable_irq();
			while (1) {
			}
			/* USER CODE END Error_Handler_Debug */
		}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
